<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.apache</groupId>
		<artifactId>apache</artifactId>
		<version>23</version>
	</parent>
	<groupId>com.github.jgzl</groupId>
	<artifactId>cleanarchcloud</artifactId>
	<packaging>pom</packaging>
	<version>${revision}</version>

	<name>微服务平台::根节点POM模块</name>
	<url>https://blog.dlihaifeng.com</url>

	<modules>
		<module>cleanarch-common</module>
		<module>cleanarch-infrastructure</module>
		<module>cleanarch-business</module>
	</modules>

	<properties>
		<revision>2021.10.19-SNAPSHOT</revision>
		<maven.docker.version>1.2.2</maven.docker.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.version>3.8.1</maven.compiler.version>
		<maven.resources.version>3.1.0</maven.resources.version>
		<maven.encoding>UTF-8</maven.encoding>
		<flatten-maven-plugin.version>1.1.0</flatten-maven-plugin.version>
		<aws.version>1.11.543</aws.version>
		<git.commit.version>2.2.5</git.commit.version>
		<mica.version>2.5.5</mica.version>
		<disruptor.version>3.4.4</disruptor.version>
		<lombok.version>1.18.20</lombok.version>
		<mapstruct.version>1.4.2.Final</mapstruct.version>
		<cxf.rs.version>3.4.4</cxf.rs.version>
		<cxf.rs.json>2.12.3</cxf.rs.json>
		<druid.starter.version>1.2.6</druid.starter.version>
		<flowable.starter.version>6.6.0</flowable.starter.version>
		<camunda.starter.version>7.15.0</camunda.starter.version>
		<guava.version>30.1.1-jre</guava.version>
		<hutool.version>5.7.15</hutool.version>
		<javassist.version>3.28.0-GA</javassist.version>
		<jwt.version>3.16.0</jwt.version>
		<keycloak.version>14.0.0</keycloak.version>
		<mybatisplus.starter.version>3.4.3.4</mybatisplus.starter.version>
		<mybatisplus.generator.version>3.5.0</mybatisplus.generator.version>
		<shardingjdbc.starter.version>4.1.1</shardingjdbc.starter.version>
		<ttl.version>2.12.1</ttl.version>
		<smartdoc.version>2.2.0</smartdoc.version>
		<jasypt.version>3.0.4</jasypt.version>
		<nacos.version>2.0.3</nacos.version>
		<jackson.jsr.version>2.12.3</jackson.jsr.version>
		<mybatis.jsr.version>1.0.2</mybatis.jsr.version>
		<okhttp.version>4.9.2</okhttp.version>
		<justauth.version>1.16.5</justauth.version>
		<justauth.starter.version>1.4.0</justauth.starter.version>
		<flatten-maven-plugin.version>1.1.0</flatten-maven-plugin.version>

		<!-- bom依赖配置管理 -->
		<spring-boot.version>2.5.6</spring-boot.version>
		<spring-boot-admin.version>2.5.2</spring-boot-admin.version>
		<spring-cloud.version>2020.0.4</spring-cloud.version>
		<spring-cloud-alibaba.version>2021.1</spring-cloud-alibaba.version>
		<spring.version>5.3.11</spring.version>
		<spring.security-oauth2.version>2.3.4.RELEASE</spring.security-oauth2.version>

		<docker.plugin.version>0.33.0</docker.plugin.version>
		<!--  默认忽略docker构建 -->
		<docker.skip>false</docker.skip>
	</properties>

	<dependencies>
		<!--  lombok自动添加get set  -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>
		<!--bootstrap 启动器-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>
		<!--配置文件加解密-->
		<dependency>
			<groupId>com.github.ulisesbocchio</groupId>
			<artifactId>jasypt-spring-boot-starter</artifactId>
			<version>${jasypt.version}</version>
		</dependency>
		<!--监控-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!--监控客户端-->
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-client</artifactId>
			<version>${spring-boot-admin.version}</version>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.alibaba.cloud</groupId>
				<artifactId>spring-cloud-alibaba-dependencies</artifactId>
				<version>${spring-cloud-alibaba.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>de.codecentric</groupId>
				<artifactId>spring-boot-admin-dependencies</artifactId>
				<version>${spring-boot-admin.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>${spring.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>net.dreamlu</groupId>
				<artifactId>mica-bom</artifactId>
				<version>${mica.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.github.jgzl</groupId>
				<artifactId>cleanarch-common-bom</artifactId>
				<version>${revision}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.lmax</groupId>
				<artifactId>disruptor</artifactId>
				<version>${disruptor.version}</version>
			</dependency>
			<!--  实体类转换  -->
			<dependency>
				<groupId>org.mapstruct</groupId>
				<artifactId>mapstruct</artifactId>
				<version>${mapstruct.version}</version>
			</dependency>
			<dependency>
				<groupId>cn.hutool</groupId>
				<artifactId>hutool-all</artifactId>
				<version>${hutool.version}</version>
			</dependency>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis-typehandlers-jsr310</artifactId>
				<version>${mybatis.jsr.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.datatype</groupId>
				<artifactId>jackson-datatype-jsr353</artifactId>
				<version>${jackson.jsr.version}</version>
			</dependency>
			<dependency>
				<groupId>com.alibaba.nacos</groupId>
				<artifactId>nacos-client</artifactId>
				<version>${nacos.version}</version>
			</dependency>
			<dependency>
				<groupId>com.auth0</groupId>
				<artifactId>java-jwt</artifactId>
				<version>${jwt.version}</version>
			</dependency>
			<!--TTL-->
			<dependency>
				<artifactId>transmittable-thread-local</artifactId>
				<groupId>com.alibaba</groupId>
				<version>${ttl.version}</version>
			</dependency>
			<dependency>
				<artifactId>keycloak-spring-boot-starter</artifactId>
				<groupId>org.keycloak</groupId>
				<version>${keycloak.version}</version>
			</dependency>
			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-boot-starter</artifactId>
				<version>${mybatisplus.starter.version}</version>
			</dependency>
			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-annotation</artifactId>
				<version>${mybatisplus.starter.version}</version>
			</dependency>
			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-extension</artifactId>
				<version>${mybatisplus.starter.version}</version>
			</dependency>
			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-generator</artifactId>
				<version>${mybatisplus.generator.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shardingsphere</groupId>
				<artifactId>sharding-jdbc-spring-boot-starter</artifactId>
				<version>${shardingjdbc.starter.version}</version>
			</dependency>
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid-spring-boot-starter</artifactId>
				<version>${druid.starter.version}</version>
			</dependency>
			<dependency>
				<groupId>org.flowable</groupId>
				<artifactId>flowable-spring-boot-starter</artifactId>
				<version>${flowable.starter.version}</version>
			</dependency>
			<dependency>
				<groupId>org.camunda.bpm.springboot</groupId>
				<artifactId>camunda-bpm-spring-boot-starter-webapp</artifactId>
				<version>${camunda.starter.version}</version>
			</dependency>
			<!--   cxf版ws,rs   -->
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-spring-boot-starter-jaxrs</artifactId>
				<version>${cxf.rs.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-spring-boot-starter-jaxws</artifactId>
				<version>${cxf.rs.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-features-logging</artifactId>
				<version>${cxf.rs.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.jaxrs</groupId>
				<artifactId>jackson-jaxrs-json-provider</artifactId>
				<version>${cxf.rs.json}</version>
			</dependency>
			<!--   自动生成文档   -->
			<dependency>
				<artifactId>smart-doc</artifactId>
				<groupId>com.github.shalousun</groupId>
				<version>${smartdoc.version}</version>
				<scope>test</scope>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.javassist/javassist -->
			<dependency>
				<groupId>org.javassist</groupId>
				<artifactId>javassist</artifactId>
				<version>${javassist.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.security.oauth</groupId>
				<artifactId>spring-security-oauth2</artifactId>
				<version>${spring.security-oauth2.version}</version>
			</dependency>
			<dependency>
				<groupId>me.zhyd.oauth</groupId>
				<artifactId>JustAuth</artifactId>
				<version>${justauth.version}</version>
			</dependency>
			<dependency>
				<groupId>com.xkcoding.justauth</groupId>
				<artifactId>justauth-spring-boot-starter</artifactId>
				<version>${justauth.starter.version}</version>
				<exclusions>
					<exclusion>
						<groupId>cn.hutool</groupId>
						<artifactId>hutool-core</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>com.squareup.okhttp3</groupId>
				<artifactId>okhttp</artifactId>
				<version>${okhttp.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<resources>
			<!-- 先指定 src/main/resources下所有文件及文件夹为资源文件,*.yml,*.yaml,*.properties进行变量替换操作 -->
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*</include>
				</includes>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.yaml</include>
					<include>**/*.yml</include>
					<include>**/*.properties</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.version}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<encoding>${maven.encoding}</encoding>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven.resources.version}</version>
				<configuration>
					<encoding>${maven.encoding}</encoding>
					<useDefaultDelimiters>true</useDefaultDelimiters>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>flatten-maven-plugin</artifactId>
				<version>${flatten-maven-plugin.version}</version>
				<configuration>
					<updatePomFile>true</updatePomFile>
					<flattenMode>resolveCiFriendliesOnly</flattenMode>
				</configuration>
				<executions>
					<execution>
						<id>flatten</id>
						<phase>process-resources</phase>
						<goals>
							<goal>flatten</goal>
						</goals>
					</execution>
					<execution>
						<id>flatten.clean</id>
						<phase>clean</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!--打包关联最新 git commit 信息插件-->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>${git.commit.version}</version>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring-boot.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!--maven  docker 打包插件 -->
				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>${docker.plugin.version}</version>
					<configuration>
						<dockerHost>${docker.host}</dockerHost>
						<registry>${docker.registry}</registry>
						<authConfig>
							<push>
								<username>${docker.username}</username>
								<password>${docker.password}</password>
							</push>
						</authConfig>
						<images>
							<image>
								<name>${docker.registry}/${docker.namespace}/${project.artifactId}:${project.version}</name>
								<build>
									<dockerFile>${project.basedir}/Dockerfile</dockerFile>
								</build>
							</image>
						</images>
					</configuration>
				</plugin>
				<!--smart-doc接口文档生成插件-->
				<plugin>
					<groupId>com.github.shalousun</groupId>
					<artifactId>smart-doc-maven-plugin</artifactId>
					<version>${smartdoc.version}</version>
					<configuration>
						<configFile>${basedir}/smart-doc.json</configFile>
						<projectName>${project.name}</projectName>
					</configuration>
					<executions>
						<execution>
							<id>smart-doc</id>
							<goals>
								<goal>html</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<!--默认激活配置-->
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- docker构建 -->
				<docker.registry>registry.cn-shanghai.aliyuncs.com</docker.registry>
				<docker.host>http://127.0.0.1:2375m</docker.host>
				<docker.namespace>cleanarch</docker.namespace>
				<docker.username>li7hai26</docker.username>
				<docker.password>li7hai26</docker.password>
			</properties>
		</profile>
		<profile>
			<id>fat</id>
			<properties>
				<!-- docker构建 -->
				<docker.registry>172.17.0.111</docker.registry>
				<docker.host>http://172.17.0.111:2375</docker.host>
				<docker.namespace>library</docker.namespace>
				<docker.username>admin</docker.username>
				<docker.password>Harbor12345</docker.password>
			</properties>
		</profile>
		<profile>
			<id>uat</id>
			<properties>
				<!-- docker构建 -->
				<docker.registry>172.17.0.111</docker.registry>
				<docker.host>http://172.17.0.111:2375</docker.host>
				<docker.namespace>library</docker.namespace>
				<docker.username>admin</docker.username>
				<docker.password>Harbor12345</docker.password>
			</properties>
		</profile>
		<profile>
			<id>pp</id>
			<properties>
				<!-- docker构建 -->
				<docker.registry>172.17.0.111</docker.registry>
				<docker.host>http://172.17.0.111:2375</docker.host>
				<docker.namespace>library</docker.namespace>
				<docker.username>admin</docker.username>
				<docker.password>Harbor12345</docker.password>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<!-- docker构建 -->
				<docker.registry>172.17.0.111</docker.registry>
				<docker.host>http://172.17.0.111:2375</docker.host>
				<docker.namespace>library</docker.namespace>
				<docker.username>admin</docker.username>
				<docker.password>Harbor12345</docker.password>
			</properties>
		</profile>
	</profiles>

</project>
